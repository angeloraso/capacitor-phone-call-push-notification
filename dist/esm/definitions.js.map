{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["import type { PluginListenerHandle } from '@capacitor/core';\n\nexport interface NotificationPermissionStatus {\n  notifications: PermissionState;\n}\n\nexport interface NotificationSettings {\n  icon: string;\n  picture: string;\n  declineButtonText: string;\n  declineButtonColor: string;\n  answerButtonText: string;\n  answerButtonColor: string;\n  color: string;\n  channelName: string;\n  channelDescription: string;\n  callingNameKey: string;\n  callingNumberKey: string;\n  typeKey: string;\n  incomingSessionTypeValue: string;\n  notifyTypeValue: string;\n  registrationTypeValue: string;\n}\n\nexport interface PhoneCallPushNotificationPlugin {\n  checkNotificationsPermission(): Promise<NotificationPermissionStatus>;\n  requestNotificationsPermission(): Promise<NotificationPermissionStatus>;\n  getData(): Promise<{response: string, callId: string, timestamp: number}>;\n  register(data?: Partial<NotificationSettings>): Promise<void>;\n  unregister(): Promise<void>;\n  addListener(\n    eventName: 'onNewToken',\n    listenerFunc: (data: { value: string }) => void,\n  ): Promise<PluginListenerHandle>;\n  addListener(\n    eventName: 'onNewData',\n    listenerFunc: (data: { data: Record<string, string> }) => void,\n  ): Promise<PluginListenerHandle>;\n}"]}